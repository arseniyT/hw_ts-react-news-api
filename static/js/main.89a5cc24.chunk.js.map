{"version":3,"sources":["data/constants/constants.ts","data/news-api/request.ts","components/CategoryTabs/CategoryTabs.tsx","components/Content/Content.tsx","components/Preloader/Preloader.tsx","components/App/App.tsx","serviceWorker.js","index.tsx"],"names":["newsData","loaderMsg","error","greeting","spinner","loadCategory","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","category","requestUrl","result","wrap","_context","prev","next","fetch","then","response","json","sent","abrupt","articles","stop","this","_x","apply","arguments","CategoryTabs","currentTab","setTab","CATEGORIES","react_default","createElement","className","map","checkSelected","key","concat","onClick","Content","data","item","title","style","backgroundImage","urlToImage","Date","publishedAt","toDateString","author","href","url","target","rel","source","name","Preloader","props","isSpinner","msg","loaderClassType","App","state","isLoading","_this","setState","catch","firstTab","_this$state","components_Preloader_Preloader","Fragment","components_CategoryTabs_CategoryTabs","components_Content_Content","Component","Boolean","window","location","hostname","match","wrapper","document","getElementById","ReactDOM","render","App_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.89a5cc24.chunk.js","sourcesContent":["interface InewsData {\n    CATEGORIES: string[];\n    CATEGORY_Q: string;\n    COUNTRY: string;\n    COUNTRY_Q: string;\n    KEY_Q: string;\n    MY_KEY: string;\n    URL: string;\n}\n\ninterface ILoaderMsgs {\n    error: string;\n    greeting: string;\n    spinner: string;\n}\n\nexport const newsData: InewsData = {\n    CATEGORIES: [\"technology\", \"science\", \"entertainment\", \"health\"],\n    CATEGORY_Q: \"&category=\",\n    COUNTRY: \"us\",\n    COUNTRY_Q: \"country=\",\n    KEY_Q: \"&apiKey=\",\n    MY_KEY: \"45ccda2e9ee14d229bab50fe6b1808b5\",\n    URL: \"https://newsapi.org/v2/top-headlines?\",\n};\n\nexport const loaderMsg: ILoaderMsgs = {\n    error: \"Houston, we have a problem... Please try later\",\n    greeting: \"welcome...\",\n    spinner: \"8)\",\n};\n","import { newsData } from \"../constants/constants\";\n\nexport const loadCategory = async (category: string) => {\n    const newsApiUrl: string = newsData.URL;\n    const countryQuery: string = newsData.COUNTRY_Q + newsData.COUNTRY;\n    const categoryQuery: string = newsData.CATEGORY_Q + category;\n    const keyQuery: string = newsData.KEY_Q + newsData.MY_KEY;\n    const requestUrl: string = newsApiUrl + countryQuery + categoryQuery + keyQuery;\n    const result = await fetch(requestUrl).then((response) => response.json());\n\n    return result.articles;\n};\n","import React, {ReactNode} from \"react\";\nimport { newsData } from \"../../data/constants/constants\";\n\ninterface ITabsProps {\n    currentTab: string;\n    setTab: (currentTab: string) => () => void;\n}\n\nconst CategoryTabs: React.SFC<ITabsProps> = ({ currentTab, setTab }) => {\n    const {CATEGORIES} = newsData;\n\n    return <div className=\"tabs\">\n        {\n            CATEGORIES.map((category): ReactNode => {\n                const checkSelected = currentTab === category ? \"selected\" : \"\";\n\n                return (\n                    <div key={category} className={`tab ${checkSelected}`} onClick={setTab(category)}>\n                        {category}\n                    </div>\n                );\n            })\n        }\n    </div>;\n};\n\nexport default CategoryTabs;\n","import React, {ReactNode} from \"react\";\nimport {INewsData} from \"../App/App\";\n\ninterface IContentProps {\n    data: INewsData[];\n}\n\nconst Content: React.SFC<IContentProps> = ({data}) => {\n    return (\n        <main className=\"content\">\n            {\n                data.map((item: INewsData): ReactNode => {\n                    return (\n                        <article key={item.title}\n                                 className=\"news-item\"\n                                 style={{backgroundImage: `url(${item.urlToImage})`}}>\n                            <p className=\"news-date\">{new Date(item.publishedAt).toDateString()}</p>\n                            <h2>{item.title}</h2>\n                            <p className=\"news-author\">author: {item.author}</p>\n                            <p className=\"news-source\">source:\n                                <a href={item.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                                    {item.source.name}\n                                </a>\n                            </p>\n                        </article>\n                    );\n                })\n            }\n        </main>\n    );\n};\n\nexport default Content;\n","import React from \"react\";\n\ninterface IPreloaderProps {\n    msg: string;\n    isSpinner: boolean;\n}\n\nconst Preloader: React.SFC<IPreloaderProps> = (props: IPreloaderProps) => {\n    const {isSpinner, msg} = props;\n    const loaderClassType = isSpinner ? \"loader\" : \"msg\";\n\n    return (\n        <div className=\"preloader\">\n            <span className={loaderClassType}>\n                {msg}\n            </span>\n        </div>\n    );\n};\n\nexport default Preloader;\n","import React, {Component, ReactNode} from \"react\";\nimport {loaderMsg, newsData} from \"../../data/constants/constants\";\nimport {loadCategory} from \"../../data/news-api/request\";\nimport CategoryTabs from \"../CategoryTabs/CategoryTabs\";\nimport Content from \"../Content/Content\";\nimport Preloader from \"../Preloader/Preloader\";\n\nexport interface INewsData {\n    source: {\n        name: string,\n    };\n    author: string;\n    title: string;\n    url: string;\n    urlToImage: string;\n    publishedAt: string;\n}\n\ninterface INewsAppState {\n    currentTab: string;\n    data: INewsData[];\n    isLoading: boolean;\n    isSpinner: boolean;\n    loaderMsg: string;\n}\n\nexport default class App extends Component<{}, INewsAppState> {\n\n    public state = {\n        currentTab: \"\",\n        data: [],\n        isLoading: true,\n        isSpinner: false,\n        loaderMsg: loaderMsg.greeting,\n\n    };\n\n    public componentDidMount(): void {\n        const firstTab = newsData.CATEGORIES[0];\n\n        this.setTab(firstTab)();\n    }\n\n    public setTab = (currentTab: string) => () => {\n        this.setState({isLoading: true});\n\n        loadCategory(currentTab)\n            .then((data) => {\n                this.setState({\n                    currentTab,\n                    data,\n                    isLoading: false,\n                    isSpinner: true,\n                    loaderMsg: loaderMsg.spinner,\n                });\n            })\n            .catch(() => {\n                this.setState({\n                    isLoading: true,\n                    isSpinner: false,\n                    loaderMsg: loaderMsg.error,\n                });\n            });\n    }\n\n    public render(): ReactNode {\n        const {currentTab, data, isLoading, isSpinner, loaderMsg } = this.state;\n\n        if (isLoading) {\n            return <Preloader isSpinner={isSpinner} msg={loaderMsg}/>;\n        } else {\n            return (\n                <React.Fragment>\n                    <CategoryTabs currentTab={currentTab} setTab={this.setTab} />\n                    <Content data={data} />\n                </React.Fragment>\n            );\n        }\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./styles/style.css\";\n\nconst wrapper = document.getElementById(\"root\");\n\nReactDOM.render(<App />, wrapper);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}